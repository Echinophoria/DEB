system.file('data_examples_templates/parameters_template.csv', package='DEB')
pars <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
data("elemental_composition")
# adding chemical and elemental parameters (they can be modified on system file)
data("elemental_composition")
chems = as.list(elemental_composition[,1:2])
library(DEB)
pars <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
View(pars)
pars <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
f <- 1
ltr <- get_tj(pars, f)
library(DEB)
library(DEB)
pars <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
f <- 1
ltr <- get_tj(pars, f)
library(DEB)
pars <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
f <- 1
ltr <- get_tj(pars, f)
p <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
f = 1
ltR <- get_tj(p, f)  # this function already makes uses of dget_l_ISO
vH = c(p$v_Hj, p$v_Hp) # growth from metamorphosis to puberty
parms = c(p$k, p$g, f, ltR$s_M)
l = ode(ltR$lj, vH, dget_l_ISO, parms, method='ode45')
lp =l[2,2]
p <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
f = 1
ltR <- get_tj(p, f)  # this function already makes uses of dget_l_ISO
vH = c(p$v_Hj, p$v_Hp) # growth from metamorphosis to puberty
parms = c(p$k, p$g, f, ltR$s_M)
require(deSolve)
l = ode(ltR$lj, vH, dget_l_ISO, parms, method='ode45')
lp =l[2,2]
p <- get_DEB_pars(system.file('data_examples_templates/results_Odontaster_validus.mat', package='DEB'))
e<-1
U_E0 <- get_uE0(p, e)   # d.cm^2, initial scaled reserve
Wd_0 <- 1e6 * U_E0 * p$p_Am * p$w_E / p$mu_E   # ug, initial (=egg) dry weight
library(DEB)
source('~/Documents/R-packages/DEB/R/get_food.R')
p <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
p$J_Xpoc_Fm <- 4.8e-04 # C-mol/d.cm2, maximum retention rate for substrate POC
p$rho_Xpoc  <- 0.99  # -, probability of binding of substrate POC.
p$J_Xpoc_Im <- 1.4e-04 # C-mol/d.cm2, maximum ingestion rate
Xi= 2.06e-05  # C-mol/l, available food
f <- get_food(p, Xi)
sources <- length(Xi)  # determining the number of food sources
# obtaining J_Xi_Fm from p
J_Xi_Fm <- p[which(grepl('_Fm', names(p), fixed=TRUE),  arr.ind = TRUE)]
names <- names(J_Xi_Fm)
for (i in 1:length(names)){
a <- names[[i]]
names[[i]] <- o
}
names
install.packages("stringr")
gsub(".*X (.+ _Fm.*", "\\1", names)
gsub(".*X (.+) _Fm.*", "\\1", names)
gsub(".*X(.+)_Fm.*", "\\1", names)
source('~/Documents/R-packages/DEB/R/get_food.R')
# obtaining J_Xi_Fm from p
J_Xi_Fm <- p[which(grepl('_Fm', names(p), fixed=TRUE),  arr.ind = TRUE)]
nm <- names(J_Xi_Fm)
for (i in 1:length(names)){
a <- nm[[i]]
nm[[i]] <- gsub(".*X(.+)_Fm.*", "\\1", names)
}
J_Xi_Fm <- as.numeric(unlist(list(J_Xi_Fm[sort(names(J_Xi_Fm))])))
Cr <- p$F_m / (1+ sum(Xi * p$F_m / J_Xi_Fm))  #
J_Xi_F = c()   # store retention of each type of food
for (i in 1:sources){
J_Xi_F[i] <- Xi[i]*Cr
}
# obtaining J_Xi_lm from p
J_Xi_Im <- p[which(grepl('_Im', names(p), fixed=TRUE),  arr.ind = TRUE)]
J_Xi_Im <- as.numeric(unlist(list(J_Xi_Im[sort(names(J_Xi_Im))])))
# obtaining rho_Xi from p
rho_Xi <- p[which(grepl('rho_', names(p), fixed=TRUE),  arr.ind = TRUE)]
rho_Xi <- as.numeric(unlist(list(rho_Xi[sort(names(rho_Xi))])))
J_Xi_I <- c()   # surface area-specific ingestion
J_Xi_P <- c()   # surface area-specific pseudofaeces production
for (i in 1:sources){
J_Xi_I[i] <- rho_Xi[i]*J_Xi_F[i]/(1+sum((rho_Xi*J_Xi_F)/J_Xi_Im))
J_Xi_P[i] <- J_Xi_F[i]- J_Xi_I[i]
}
# listing and name parameters
J_Xi_F <- as.list(J_Xi_F)
J_Xi_I <- as.list(J_Xi_I)
J_Xi_P <- as.list(J_Xi_P)
names(J_Xi_F) <- paste(nm,'_F', sep ='')  # clearance rates by food type.
names(J_Xi_I) <- paste(nm,'_I', sep ='')  # Ingestion rates by food type.
names(J_Xi_P) <- paste(nm,'_P', sep ='')  # Egestion rates by food type.
names(J_Xi_F) <- paste('J_X',nm,'_F', sep ='')  # clearance rates by food type.
names(J_Xi_I) <- paste('J_X',nm,'_I', sep ='')  # Ingestion rates by food type.
names(J_Xi_P) <- paste('J_X',nm,'_P', sep ='')  # Egestion rates by food type.
source('~/Documents/R-packages/DEB/R/get_food.R')
p <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
p$J_Xpoc_Fm <- 4.8e-04 # C-mol/d.cm2, maximum retention rate for substrate POC
p$rho_Xpoc  <- 0.99  # -, probability of binding of substrate POC.
p$J_Xpoc_Im <- 1.4e-04 # C-mol/d.cm2, maximum ingestion rate
Xi= 2.06e-05  # C-mol/l, available food
f <- get_food(p, Xi)
library(usethis)
devtools
library(devtools)
install_github("hadley/dplyr")
library(devtools)
install_github("hadley/dplyr")
roxygen2::update_collate()
roxygen2::update_collate(base_path = getwd() )
getwd
getwd()
roxygen2::update_collate("/Users/ulmo/Documents/R-packages/DEB" )
loaded_packages('DEB')
roxygen2::roxygenise(package.dir=getwd())
roxygen2::roxygenise(package.dir=getwd(), load_code ='source')
devtools::install_github('Echinophoria/DEB')
p <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
p$J_Xpoc_Fm <- 4.8e-04 # C-mol/d.cm2, maximum retention rate for substrate POC
p$rho_Xpoc  <- 0.99  # -, probability of binding of substrate POC.
p$J_Xpoc_Im <- 1.4e-04 # C-mol/d.cm2, maximum ingestion rate
library(DEB)
p <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
p$J_Xpoc_Fm <- 4.8e-04 # C-mol/d.cm2, maximum retention rate for substrate POC
p$rho_Xpoc  <- 0.99  # -, probability of binding of substrate POC.
p$J_Xpoc_Im <- 1.4e-04 # C-mol/d.cm2, maximum ingestion rate
Xi= 2.06e-05  # C-mol/l, available food
J_Xi <- get_food(p, Xi)
sources <- length(Xi)  # determining the number of food sources
# obtaining J_Xi_Fm from p
J_Xi_Fm <- p[which(grepl('_Fm', names(p), fixed=TRUE),  arr.ind = TRUE)]
nm <- names(J_Xi_Fm)
for (i in 1:length(names)){
a <- nm[[i]]
nm[[i]] <- gsub(".*X(.+)_Fm.*", "\\1", names)
}
for (i in 1:length(names)){
a <- nm[[i]]
nm[[i]] <- gsub(".*X(.+)_Fm.*", "\\1", nm)
}
library(DEB)
library(DEB)
library(DEB)
## DEB model for Mussel
library(devtools)
install_github('https://github.com/Echinophoria/DEB')  # to make sure we load the last version
library(DEB)
## load DEB parameters and calculate auxiliary parameters. To incorporate
## larvae, besides the parameters we need the thresholds of maturity to assess
## when the animals switch from one stage to the next. This model has 3 maturity
## thresholds: Hb (birth, start of exogenous feeding), Hj (metamorphosis, when
## the larvae settle), Hp (puberty, when the animal starts accumulating energy
## for reproduction)
path <- system.file('data', package='DEB.tools')  # load the parameters for mussels already in the DEB package.
## load DEB parameters and calculate auxiliary parameters. To incorporate
## larvae, besides the parameters we need the thresholds of maturity to assess
## when the animals switch from one stage to the next. This model has 3 maturity
## thresholds: Hb (birth, start of exogenous feeding), Hj (metamorphosis, when
## the larvae settle), Hp (puberty, when the animal starts accumulating energy
## for reproduction)
p <- get_DEB_pars(system.file('data_examples_templates/parameters_Mytilus_edulis.csv', package='DEB'))
## Initial stage,  here we say from where to start. We can start already with adults (H>Hp) or at any other stage. In this case we start from fertilised egg t0.
e_mother <- 1
UE0 <- get_uE0(p, e_mother)*p$p_Am   # Joules,  initial reserve of the egg. THERE IS A ROUTINE CALLED WITHIN get_uE0, beta0.
V0 <- (1e-4)^3 # cm^3, structural volum, we cannot start with 0 but we do use a very small value. This is structural volume, i.e. this is related to somatic growth
H0 <- 0 # Joules, maturity, it is a counter for development. Energy is invested into development. When the animal is fully developed it stops and this energy is used for reproduction
R0 <- 0 # Joules, this is the reproduction buffer. It is accumulated when H>Hp,
V <- V0
E <- UE0
H <- H0
R <- R0
JX <- 0 # C-mol, feeding rate ingested food
## environmental conditions (temperature and food)
Ti <- 291 # K,temperature
TC <- t_corr(p, Ti)  # correction for temperature, Ti is temperature in Kelvins
## each substrate requires three parameters:
p$J_Xpoc_Fm <- 4.8e-04 # C-mol/d.cm2, maximum retention rate for substrate POC
p$rho_Xpoc  <- 0.99  # -, probability of binding of substrate POC.
p$J_Xpoc_Im <- 1.4e-04 # C-mol/d.cm2, maximum ingestion rate
Xi= 2.06e-05  # C-mol/l, available food
JX <- get_food(p, Xi) # calculate feeding related rates: Clearance, Ingestion and Egestion.
f_Xi= c()
for (i in 1:length(JX$J_Xi_I)){
f_Xi[i] <- p$p_Am/p$Kap_X/mu_X/JX$J_Xi_I[[i]]
}
for (i in 1:length(JX$J_Xi_I)){
f_Xi[i] <- p$p_Am/p$Kap_X/p$mu_X/JX$J_Xi_I[[i]]
}
JX$J_Xi_I[[i]]
JX$J_Xi_I[1]
JX$J_Xi_I[1]
JX$J_Xi_I
JX
JX$J_X[[2]]
JX[[2]]
length(JX[[2]])
f_Xi <- p$p_Am/p$Kap_X/p$mu_X/JX[[2]]
JX[[2]]
unlist(JX[[2]])
f_Xi <- p$p_Am/p$Kap_X/p$mu_X/unlist(JX[[2]])
p$p_Am
p$Kap_X
p$mu_X
View(p)
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX[[2]])
f_Xi
unlist(JX)
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX)
f_Xi
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX[[2]])
f = f_Xi
## Embryo stage, H < Hb
while (H < p$E_Hb){  # there is no feeding in this stage, this part of the code may need to be applied in steps shorter than days... for the mussel is 0.2 days at 18C.
L = V^(1/3)  # cm, structura length
e = p$v * E/p$p_Am/V  # scaled reserves
s_M = 1  # during embryo development there is no acceleration
pA = 0 # Joules, there is no assimilation, it is a non feeding stage.
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m) # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH<0){ # this is mortality relative to the condition of the egg being to bad to produce a feeding larvae
warning('embryo cannot develop to metamorphosis')
break()
}
}
dE = - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24  # all DEB parameters involving rates are by day. This is so we reduce the step to hour. Is done is all stages
V <- V + dV/24
E <- E + dE/24
if (E<=0){
warning('embryo cannot develop to metamorphosis')
break()
}
}
Lb <- V^(1/3)  # cm, structural length at birth (needed for following stage)
Lwb <- Lb / p$del_M # cm, physical shell length at birth (just for check up)
## Feeding larva stage, Hb < H < Hj
while (H > p$E_Hb  & H < p$E_Hj){
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
s_M = L/Lb # acceleration occurs during this stage and s_M needs to be updated
# acceleration factor to change it increases during larval development and it
# links the embryo metabolism to the adults. This acceleration explains the
# exponential growth during the larval stage and it is determined by food,
# hence larvae at different food levels will produce adults with different
# metabolism
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}
else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dR/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dH = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24
V <- V + dV/24
E <- E + dE/24
}
## Juvenile stage Hj < H < Hp
while (H > p$E_Hj & H < p$E_Hp){ # animal is still not mature, (1-kap)*pC is used to increase maturity (H) towards the next stage.
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$p_Am * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}
else {
# kap*pC cannot cover somatic maintenance, kappa rule no longer applies and
# priority S>J>R>G is used. There is no growth and there may be no
# investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dH/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dH = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24
V <- V + dV/24
E <- E + dE/24
}
Lwp <- V^(1/3)/p$del_M
## Adult (reproducing adult) H > Hp. Energy is no longer alocated to H, but instead that energy is used for reproduction.
while (H > p$E_Hp){
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dR = ((1 - p$kap) * pC - pJ)
}  else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dR = (pC - pS - pJ)
dV = 0
if (dR < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dR/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dR = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
R <- R + dR/24
V <- V + dV/24
E <- E + dE/24
# I have to stop it somewhere, can ignore this when using a limited number of steps.
Li <-  1.13 # cm, maximum structural length at feeding level. This is a von Bertalanffy parameter
if (V^(1/3)>Li){
break()
}
}
Xi= 6.06e-05  # C-mol/l, available food
JX <- get_food(p, Xi) # calculate feeding related rates: Clearance, Ingestion and Egestion.
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX[[2]])
Xi= 2.06e-05  # C-mol/l, available food
JX <- get_food(p, Xi) # calculate feeding related rates: Clearance, Ingestion and Egestion.
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX[[2]])
Xi= 4.06e-05  # C-mol/l, available food
JX <- get_food(p, Xi) # calculate feeding related rates: Clearance, Ingestion and Egestion.
f_Xi <- p$p_Am/p$kap_X/p$mu_X/unlist(JX[[2]])
Xi= 2.06e-05  # C-mol/l, available food
JX <- get_food(p, Xi) # calculate feeding related rates: Clearance, Ingestion and Egestion.
f_Xi <- unlist(JX[[2]])*p$kap_X*p$mu_X/p$p_Am   # equivalent to scaled functional response (assimilation rate / max. assimilation rate)
f = f_Xi
## Embryo stage, H < Hb
while (H < p$E_Hb){  # there is no feeding in this stage, this part of the code may need to be applied in steps shorter than days... for the mussel is 0.2 days at 18C.
L = V^(1/3)  # cm, structura length
e = p$v * E/p$p_Am/V  # scaled reserves
s_M = 1  # during embryo development there is no acceleration
pA = 0 # Joules, there is no assimilation, it is a non feeding stage.
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m) # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH<0){ # this is mortality relative to the condition of the egg being to bad to produce a feeding larvae
warning('embryo cannot develop to metamorphosis')
break()
}
}
dE = - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24  # all DEB parameters involving rates are by day. This is so we reduce the step to hour. Is done is all stages
V <- V + dV/24
E <- E + dE/24
if (E<=0){
warning('embryo cannot develop to metamorphosis')
break()
}
}
Lb <- V^(1/3)  # cm, structural length at birth (needed for following stage)
Lwb <- Lb / p$del_M # cm, physical shell length at birth (just for check up)
## Feeding larva stage, Hb < H < Hj
while (H > p$E_Hb  & H < p$E_Hj){
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
s_M = L/Lb # acceleration occurs during this stage and s_M needs to be updated
# acceleration factor to change it increases during larval development and it
# links the embryo metabolism to the adults. This acceleration explains the
# exponential growth during the larval stage and it is determined by food,
# hence larvae at different food levels will produce adults with different
# metabolism
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}
else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dR/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dH = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24
V <- V + dV/24
E <- E + dE/24
}
## Juvenile stage Hj < H < Hp
while (H > p$E_Hj & H < p$E_Hp){ # animal is still not mature, (1-kap)*pC is used to increase maturity (H) towards the next stage.
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$p_Am * p$k_J * H  # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dH = ((1 - p$kap) * pC - pJ)
}
else {
# kap*pC cannot cover somatic maintenance, kappa rule no longer applies and
# priority S>J>R>G is used. There is no growth and there may be no
# investment on maturity
dH = (pC - pS - pJ)
dV = 0
if (dH < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dH/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dH = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
H <- H + dH/24
V <- V + dV/24
E <- E + dE/24
}
Lwp <- V^(1/3)/p$del_M
## Adult (reproducing adult) H > Hp. Energy is no longer alocated to H, but instead that energy is used for reproduction.
while (H > p$E_Hp){
L = V^(1/3)  # structural length
e = p$v * E/p$p_Am/V  # scaled reserves
pA = TC * p$p_Am * L^2 * s_M * f  # Joules, assimilation power, it depends on available food, abundance and type
pC = TC * p$p_Am * L^2 * ((p$g + p$L_T/p$L_m) * s_M + L/p$L_m)/(1 + p$g/e) # Joules, mobilisation power, depends on animal condition (reserves, e)
pS = TC * p$p_Am * p$kap * L^2 * (L + p$L_T/p$L_m)  # Joules, cost of somatic maintenance, depends on the size of the animal, V (structural volume)
pJ = TC * p$k_J * H # Joules, cost of maintaining maturity, it is a small cost related to maintain complexity, but it comes from the reproductive investment
if (p$kap * pC >= pS) {  # there is energy for somatic maintenance and maybe for growth, kappa rule fully applies
dV = (pC * p$kap - pS)/p$E_G
dR = ((1 - p$kap) * pC - pJ)
}  else { # kap*pC cannot cover somatic maintenance, kappa rule no longer applies and priority S>J>R>G is used. There is no growth and there may be no investment on maturity
dR = (pC - pS - pJ)
dV = 0
if (dR < 0) {
# when there isn't energy enough to cover maintenance, the animal either
# dies or uses its tissue. In the case of mussels tissue is used, first
# the reproductive tissue, when exausted the structure is used. At this
# stage there is no reproductive tissue. So only energy from structure can
# be used to keep the animal alive.
dV = dR/p$E_G   # Start of using tissue. Animal shrink! shell cannot shrink so is only the somatic tissue that is shrinking. That is why we follow V and L and not physical length.
dR = 0    # there is no energy to keep maturing.
}
}
dE = pA - pC  # update the energy in the reserves (assimilated - mobilised)
# updating state variables
R <- R + dR/24
V <- V + dV/24
E <- E + dE/24
# I have to stop it somewhere, can ignore this when using a limited number of steps.
Li <-  1.13 # cm, maximum structural length at feeding level. This is a von Bertalanffy parameter
if (V^(1/3)>Li){
break()
}
}
install_github('https://github.com/Echinophoria/DEB')  # to make sure we load the last version
## DEB model for Mussel
library(devtools)
install_github('https://github.com/Echinophoria/DEB')  # to make sure we load the last version
## DEB model for Mussel
library(devtools)
library(DEB)
library(ncdf4)
